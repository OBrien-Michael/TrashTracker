# This workflow will build and test a .NET MAUI Application for Windows
#
#

name: CI/CD .NET Maui

# Define when the workflow should run. On a push to main, and on all pull requests
on:
  push:
    branches: [ "main" ]
  pull_request:

# Jobs to run
jobs:

  #Run Linting
  run-lint:
    uses: ./.github/workflows/super-linter.yml

    #Permissions for the Linter
    permissions:
      contents: read
      packages: read
      statuses: write

  #Run CodeQL Analysis
  codeql-analysis:
    uses: ./.github/workflows/CodeQL.yml

    #Permissions for CodeQL
    permissions:
      actions: read
      contents: read
      security-events: write


  build-windows: #Windows build Job
    runs-on: windows-latest  # Runs on latest windows

    #Checkout the repo
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    #Install MAUI workload
    - name: Install MAUI workload
      run: dotnet workload install maui

    # Execute build the project
    - name: Build for windows
      run: dotnet build TrashTracker/TrashTracker.csproj -c Release -f:net8.0-windows10.0.19041.0   #Build a release based on target framework

    # Upload the build artifact
    - uses: actions/upload-artifact@v4
      with:
          name: windows artifact
          path: '**/bin/Release'



  build-android: #Android build Job
    runs-on: windows-latest  # Runs on latest Windows

    #Checkout the repo
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    #Install MAUI workload
    - name: Install MAUI workload
      run: dotnet workload install maui

    # Execute build the project
    - name: Build for android
      run: dotnet build TrashTracker/TrashTracker.csproj -c Release -f:net8.0-android   #Build a release based on target framework

    # Upload the build artifact
    - uses: actions/upload-artifact@v4
      with:
          name: android artifact
          path: '**/bin/Release'


  test: #Test Job
    # Requires builds to pass first
    needs: [ build-windows, build-android ]
    runs-on: windows-latest  # Runs on latest windows

    steps:
        #Download the built artifact
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: 
          name: windows artifact
          
      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test TrashTrackerTestSuite/TrashTrackerTestSuite.csproj

  # Define a deploy to development environment job
  deploy-to-dev:
    name: Deploy to Development
    # Job runs only if the event is a pull request
    if: github.event_name == 'pull_request'
    # The job needs the build job to pass first
    needs: [ test ]
    runs-on: ubuntu-latest
    # Define some environment variables
    environment: 
      # The environment name must match the envrionment name in the repository
      name: Development
    steps:
      - name: Deploy
        run: echo Deployed to Development Environment
  
  # Our deployment to staging environment
  deploy-to-staging:
    name: Deploy to Staging
    # deploy to staging only if we are committing to main
    if: github.event.ref == 'refs/heads/main'
    needs: [ test ]
    runs-on: ubuntu-latest
    environment:
      name: Staging
    steps:
    - name: Deploy
      run: echo Deploying to Staging Environment
  
  # Deploy to production environment
  deploy-to-production:
    name: Deploy to Production
    needs: [deploy-to-staging]
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Deploy
        run: echo Deploying to Production Environment

  


